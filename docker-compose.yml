version: "3.6"

services:
    webserver:
        container_name: nginx
        image: "nginx:alpine"
        restart: unless-stopped
        volumes:
            - "./nginx/default.conf:/etc/nginx/conf.d/default.conf"
            - "./nginx/cors.conf:/etc/nginx/conf.d/cors.conf"
            - "./nginx/nginx.conf:/etc/nginx/nginx.conf"
            - "./frontend/frontend/browser:/usr/share/nginx/html"
            - "./nginx/chatapp.crt:/etc/ssl/certs/chatapp.crt"
            - "./nginx/chatapp.key:/etc/ssl/private/chatapp.key"
        ports:
            - "80:80"
            - "443:443"
        env_file:
            - .env
        depends_on:
            - backend-server

    keycloak:
        image: quay.io/keycloak/keycloak:latest
        container_name: keycloak
        volumes:
            - ./keycloak/realms:/opt/keycloak/data/import
        environment:
            KC_DB: postgres
            KC_DB_URL: jdbc:postgresql://keycloak-db:${KEYCLOAK_DB_PORT}/keycloak
            KC_DB_USERNAME: ${KEYCLOAK_DB_USERNAME}
            KC_DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
            KC_HTTP_RELATIVE_PATH: /auth
            KC_HOSTNAME: localhost
            KC_HOSTNAME_PORT: 8080
            KC_HOSTNAME_STRICT: false
            KC_HOSTNAME_STRICT_HTTPS: false
            KC_LOG_LEVEL: info
            KC_METRICS_ENABLED: true
            KC_HEALTH_ENABLED: true
            KC_BOOTSTRAP_ADMIN_USERNAME: ${ADMIN_USERNAME}
            KC_BOOTSTRAP_ADMIN_PASSWORD: ${ADMIN_PASSWORD}
        command: start-dev --http-relative-path=/auth --import-realm
        depends_on:
            keycloak-db:
                condition: service_healthy
        ports:
            - 8080:8080
        env_file:
            - .env

    keycloak-db:
        container_name: ${KEYCLOAK_DB_HOST}
        image: postgres:15
        volumes:
            - keycloak_data:/var/lib/postgresql/data
        environment:
            POSTGRES_DB: keycloak
            POSTGRES_USER: ${KEYCLOAK_DB_USERNAME}
            POSTGRES_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
        healthcheck:
            test:
                [
                    "CMD",
                    "pg_isready",
                    "-U",
                    "${KEYCLOAK_DB_USERNAME}",
                    "-d",
                    "keycloak",
                ]
            interval: 10s
            retries: 5
            start_period: 10s
            timeout: 5s
        ports:
            - "${KEYCLOAK_DB_PORT}:${KEYCLOAK_DB_PORT}"
        env_file:
            - .env

    backend-server:
        container_name: backend
        restart: always
        build:
            context: ./backend
            dockerfile: Dockerfile
        ports:
            - "3000:${PORT}"
        volumes:
            - ./backend:/usr/src/app
        depends_on:
            keycloak-db:
                condition: service_healthy
            redis:
                condition: service_healthy
        env_file:
            - .env

    redis:
        image: redis:8.0.2
        container_name: redis-server
        ports:
            - "6379:6379"
        volumes:
            - redis_data:/data
            - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
        command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
        restart: unless-stopped
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 30s
            timeout: 5s
            retries: 3
            start_period: 10s
        depends_on:
            keycloak-db:
                condition: service_healthy
        env_file:
            - .env

volumes:
    keycloak_data:
    redis_data:
