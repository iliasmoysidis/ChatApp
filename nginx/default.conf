# server {
#     listen 80;
    
#     client_max_body_size 108M;

#     access_log /var/log/nginx/application.access.log;
#     error_log /var/log/nginx/application.error.log;

#     include /etc/nginx/conf.d/cors.conf;

#     root /usr/share/nginx/html/;
#     index index.html;

#     # try to serve file directly, fallback to index.php
#     location / {
#         try_files $uri /index.html;
#     }

#     location ~* ^/(socket.io|ws)/ {
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         proxy_set_header Host $host;
#         proxy_pass http://backend-server:3000;
#         proxy_http_version 1.1;
#         proxy_set_header Upgrade $http_upgrade;
#         proxy_set_header Connection "upgrade";
#     }

#     location /auth/ {
#         proxy_pass http://keycloak:8080/auth/;  
#         proxy_set_header Host $host;
#         proxy_set_header X-Real-IP $remote_addr;
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         proxy_set_header X-Forwarded-Proto $scheme;
#     }

#     location /backend/ {
#         proxy_pass http://backend-server:3000/;
#         proxy_http_version 1.1;
#         proxy_set_header Host $host;
#         proxy_set_header X-Real-IP $remote_addr;
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         proxy_set_header X-Forwarded-Proto $scheme;
#         proxy_set_header Authorization $http_authorization;

#         add_header 'Access-Control-Allow-Origin' "$http_origin" always;
#         add_header 'Access-Control-Allow-Credentials' 'true' always;
#         add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type' always;
#         add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;

#         if ($request_method = OPTIONS ) {
#             return 204;
#         }
#     }

#     location ~ /\.(?!well-known).* {
#         deny all;
#     }

#     if ($request_method = OPTIONS) {
#         return 204;
#     }
# }

server {
    listen 80;
    server_name chatapp.it.com;
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl;
    server_name chatapp.it.com;

    ssl_certificate /etc/letsencrypt/live/chatapp.it.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/chatapp.it.com/privkey.pem;

    include /etc/nginx/conf.d/cors.conf;

    client_max_body_size 108M;
    access_log /var/log/nginx/application.access.log;
    error_log /var/log/nginx/application.error.log;

    root /usr/share/nginx/html/;
    index index.html;

    location / {
        try_files $uri /index.html;
    }

    location ~* ^/(socket.io|ws)/ {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $host;
        proxy_pass http://backend:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

    location /auth/ {
        proxy_pass http://keycloak:8080/auth/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header X-Forwarded-Port 443;
        proxy_set_header X-Forwarded-Host $host;
    }

    location /backend/ {
        proxy_pass http://backend:3000/;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Authorization $http_authorization;

        add_header 'Access-Control-Allow-Origin' "$http_origin" always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;

        if ($request_method = OPTIONS ) {
            return 204;
        }
    }

    location ~ /\.(?!well-known).* {
        deny all;
    }
}
